#   Makefile generated by Keil2GCC converter (c)2018 Ondrej Sterba.
# 
# GENERATED MAKEFILE IS PROVIDED "AS IS" AND ANY EXPRESS
# OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.
#/

PROJECT = Quoridor

CC	= arm-none-eabi-gcc
CPP	= arm-none-eabi-g++
AS	= arm-none-eabi-as
LD	= arm-none-eabi-g++
CP	= arm-none-eabi-objcopy
OS	= arm-none-eabi-size
OD	= arm-none-eabi-objdump

VECTOR	= gcc_startupfile_lpc1768.s

LDSCRIPT = ./gcc_linkerfile_lpc1768.ld
LDFLAGS  = -mcpu=cortex-m3 -mthumb -mfloat-abi=soft -T$(LDSCRIPT) -lnosys -Wl,--gc-sections -Wl,-Map,$(PROJECT).map


SRC = $(VECTOR) \
      ./GLCD/AsciiLib.c\
      ./GLCD/GLCD.c\
      ./GLCD/HzLib.c\
      ./RIT/IRQ_RIT.c\
      ./RIT/lib_RIT.c\
      ./TouchPanel/TouchPanel.c\
      ./button_EXINT/IRQ_button.c\
      ./button_EXINT/lib_button.c\
      ./game/game.c\
      ./game/graphics.c\
      ./imgs/cell.c\
      ./imgs/player.c\
      ./imgs/wall.c\
      ./joystick/funct_joystick.c\
      ./joystick/lib_joystick.c\
      ./led/funct_led.c\
      ./led/lib_led.c\
      ./main.c\
      ./system_LPC17xx.c\
      ./utils/dynarray.c\
      ./utils/stack.c\

#  C++ source files
CPPFILES = $(filter %.cpp, $(SRC))
#  C source files
CFILES = $(filter %.c, $(SRC))
#  Assembly source files
ASMFILES = $(filter %.s, $(SRC))

# Object files
CPPOBJ = $(CPPFILES:.cpp=.o)
COBJ = $(CFILES:.c=.o)
SOBJ = $(ASMFILES:.s=.o)
OBJ  = $(CPPOBJ) $(COBJ) $(SOBJ)

# Compile thumb for cortex-m3 with debug info
CPPFLAGS  = -g -mthumb -mcpu=cortex-m3 -mfloat-abi=soft -Og -fpack-struct -fdata-sections -ffunction-sections -fno-exceptions -fno-rtti -std=c++11
CFLAGS  = -g -mthumb -mcpu=cortex-m3 -mfloat-abi=soft -Og -fpack-struct -fdata-sections -ffunction-sections -std=c99
ASFLAGS = -g -mthumb -mcpu=cortex-m3


all: $(SRC) $(PROJECT).elf $(PROJECT).hex $(PROJECT).bin

$(PROJECT).bin: $(PROJECT).elf
	@$(CP) -O binary $(PROJECT).elf $@

$(PROJECT).hex: $(PROJECT).elf
	@$(CP) -O ihex $(PROJECT).elf $@

$(PROJECT).elf: $(OBJ)
	@echo Linking
	@$(LD) $(LDFLAGS) $(OBJ) -o $@
	@$(OS) -t $(PROJECT).elf


$(CPPOBJ): %.o: %.cpp
	@echo $<
	@$(CPP) -c $(INC) $(CPPFLAGS) $< -o $@

$(COBJ): %.o: %.c
	@echo $<
	@$(CC) -c $(INC) $(CFLAGS) $< -o $@

$(SOBJ): %.o: %.s
	@echo $<
	@$(AS) -c $(ASFLAGS) $< -o $@

clean:
	@rm -f $(PROJECT).elf $(PROJECT).bin $(PROJECT).map $(PROJECT).hex $(PROJECT).lss $(OBJ)

install: $(PROJECT).bin
	JLink.exe -device LPC1768 -CommanderScript ./flash.jlink
