/** Header file generated by Keil2GCC converter.
 * 
 * GENERATED STARTUP FILE WITH ISR VECTORS IS PROVIDED "AS IS" AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.
*/

  .syntax unified
  .cpu cortex-m3
  .fpu softvfp
  .thumb

.global g_pfnVectors
.global Default_Handler

/* start address for the initialization values of the .data section.
defined in linker script */
.word _sidata
/* start address for the .data section. defined in linker script */
.word _sdata
/* end address for the .data section. defined in linker script */
.word _edata
/* start address for the .bss section. defined in linker script */
.word _sbss
/* end address for the .bss section. defined in linker script */
.word _ebss
/* stack used for SystemInit_ExtMemCtl; always internal RAM used */

/**
 * @brief  This is the code that gets called when the processor first
 *          starts execution following a reset event. Only the absolutely
 *          necessary set is performed, after which the application
 *          supplied main() routine is called.
 * @param  None
 * @retval : None
*/

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
/* Disable all interrupts.*/
  cpsid i

/* Set stack pointer */
  ldr   sp, =_estack

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
  ldr r3, =_edata
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
  b LoopFillZerobss
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
  cmp r2, r3
  bcc FillZerobss

/* Call the clock system intitialization function.*/
  bl  SystemInit
/* Call static constructors */
  bl __libc_init_array
/* Enable all interrupts.*/
  cpsie i
/* Call the application's entry point.*/
  bl main
  bx lr
  .size Reset_Handler, .-Reset_Handler

/**
* @brief  This is the code that gets called when the processor receives an
*         unexpected interrupt.  This simply enters an infinite loop, preserving
*         the system state for examination by a debugger.
*
* @param  None
* @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
  .size Default_Handler, .-Default_Handler
/******************************************************************************
*
* The minimal vector table for a cortex-m3.  Note that the proper constructs
* must be placed on this to ensure that it ends up at physical address
* 0x0000.0000.
*
******************************************************************************/
  .section .isr_vector,"a",%progbits
  .type g_pfnVectors, %object
  .size g_pfnVectors, .-g_pfnVectors

g_pfnVectors:
  .word 	_estack
  .word 	Reset_Handler
  .word 	NMI_Handler
  .word 	HardFault_Handler
  .word 	MemManage_Handler
  .word 	BusFault_Handler
  .word 	UsageFault_Handler
  .word 	0
  .word 	0
  .word 	0
  .word 	0
  .word 	SVC_Handler
  .word 	DebugMon_Handler
  .word 	0
  .word 	PendSV_Handler
  .word 	SysTick_Handler
  .word 	WDT_IRQHandler
  .word 	TIMER0_IRQHandler
  .word 	TIMER1_IRQHandler
  .word 	TIMER2_IRQHandler
  .word 	TIMER3_IRQHandler
  .word 	UART0_IRQHandler
  .word 	UART1_IRQHandler
  .word 	UART2_IRQHandler
  .word 	UART3_IRQHandler
  .word 	PWM1_IRQHandler
  .word 	I2C0_IRQHandler
  .word 	I2C1_IRQHandler
  .word 	I2C2_IRQHandler
  .word 	SPI_IRQHandler
  .word 	SSP0_IRQHandler
  .word 	SSP1_IRQHandler
  .word 	PLL0_IRQHandler
  .word 	RTC_IRQHandler
  .word 	EINT0_IRQHandler
  .word 	EINT1_IRQHandler
  .word 	EINT2_IRQHandler
  .word 	EINT3_IRQHandler
  .word 	ADC_IRQHandler
  .word 	BOD_IRQHandler
  .word 	USB_IRQHandler
  .word 	CAN_IRQHandler
  .word 	DMA_IRQHandler
  .word 	I2S_IRQHandler
  .word 	ENET_IRQHandler
  .word 	RIT_IRQHandler
  .word 	MCPWM_IRQHandler
  .word 	QEI_IRQHandler
  .word 	PLL1_IRQHandler
  .word 	USBActivity_IRQHandler
  .word 	CANActivity_IRQHandler
  .word 	0xFFFFFFFF

/*******************************************************************************
*
* Provide weak aliases for each Exception handler to the Default_Handler.
* As they are weak aliases, any function with the same name will override
* this definition.
*
*******************************************************************************/
  .weak      NMI_Handler
  .thumb_set NMI_Handler,Default_Handler

  .weak      HardFault_Handler
  .thumb_set HardFault_Handler,Default_Handler

  .weak      MemManage_Handler
  .thumb_set MemManage_Handler,Default_Handler

  .weak      BusFault_Handler
  .thumb_set BusFault_Handler,Default_Handler

  .weak      UsageFault_Handler
  .thumb_set UsageFault_Handler,Default_Handler

  .weak      SVC_Handler
  .thumb_set SVC_Handler,Default_Handler

  .weak      DebugMon_Handler
  .thumb_set DebugMon_Handler,Default_Handler

  .weak      PendSV_Handler
  .thumb_set PendSV_Handler,Default_Handler

  .weak      SysTick_Handler
  .thumb_set SysTick_Handler,Default_Handler

  .weak      WDT_IRQHandler
  .thumb_set WDT_IRQHandler,Default_Handler

  .weak      TIMER0_IRQHandler
  .thumb_set TIMER0_IRQHandler,Default_Handler

  .weak      TIMER1_IRQHandler
  .thumb_set TIMER1_IRQHandler,Default_Handler

  .weak      TIMER2_IRQHandler
  .thumb_set TIMER2_IRQHandler,Default_Handler

  .weak      TIMER3_IRQHandler
  .thumb_set TIMER3_IRQHandler,Default_Handler

  .weak      UART0_IRQHandler
  .thumb_set UART0_IRQHandler,Default_Handler

  .weak      UART1_IRQHandler
  .thumb_set UART1_IRQHandler,Default_Handler

  .weak      UART2_IRQHandler
  .thumb_set UART2_IRQHandler,Default_Handler

  .weak      UART3_IRQHandler
  .thumb_set UART3_IRQHandler,Default_Handler

  .weak      PWM1_IRQHandler
  .thumb_set PWM1_IRQHandler,Default_Handler

  .weak      I2C0_IRQHandler
  .thumb_set I2C0_IRQHandler,Default_Handler

  .weak      I2C1_IRQHandler
  .thumb_set I2C1_IRQHandler,Default_Handler

  .weak      I2C2_IRQHandler
  .thumb_set I2C2_IRQHandler,Default_Handler

  .weak      SPI_IRQHandler
  .thumb_set SPI_IRQHandler,Default_Handler

  .weak      SSP0_IRQHandler
  .thumb_set SSP0_IRQHandler,Default_Handler

  .weak      SSP1_IRQHandler
  .thumb_set SSP1_IRQHandler,Default_Handler

  .weak      PLL0_IRQHandler
  .thumb_set PLL0_IRQHandler,Default_Handler

  .weak      RTC_IRQHandler
  .thumb_set RTC_IRQHandler,Default_Handler

  .weak      EINT0_IRQHandler
  .thumb_set EINT0_IRQHandler,Default_Handler

  .weak      EINT1_IRQHandler
  .thumb_set EINT1_IRQHandler,Default_Handler

  .weak      EINT2_IRQHandler
  .thumb_set EINT2_IRQHandler,Default_Handler

  .weak      EINT3_IRQHandler
  .thumb_set EINT3_IRQHandler,Default_Handler

  .weak      ADC_IRQHandler
  .thumb_set ADC_IRQHandler,Default_Handler

  .weak      BOD_IRQHandler
  .thumb_set BOD_IRQHandler,Default_Handler

  .weak      USB_IRQHandler
  .thumb_set USB_IRQHandler,Default_Handler

  .weak      CAN_IRQHandler
  .thumb_set CAN_IRQHandler,Default_Handler

  .weak      DMA_IRQHandler
  .thumb_set DMA_IRQHandler,Default_Handler

  .weak      I2S_IRQHandler
  .thumb_set I2S_IRQHandler,Default_Handler

  .weak      ENET_IRQHandler
  .thumb_set ENET_IRQHandler,Default_Handler

  .weak      RIT_IRQHandler
  .thumb_set RIT_IRQHandler,Default_Handler

  .weak      MCPWM_IRQHandler
  .thumb_set MCPWM_IRQHandler,Default_Handler

  .weak      QEI_IRQHandler
  .thumb_set QEI_IRQHandler,Default_Handler

  .weak      PLL1_IRQHandler
  .thumb_set PLL1_IRQHandler,Default_Handler

  .weak      USBActivity_IRQHandler
  .thumb_set USBActivity_IRQHandler,Default_Handler

  .weak      CANActivity_IRQHandler
  .thumb_set CANActivity_IRQHandler,Default_Handler


